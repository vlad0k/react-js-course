{"version":3,"sources":["components/Navigation/Navigation.module.css","components/Dialog/Dialog.module.css","components/Header/Header.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.jsx","components/Navigation/Navigation.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Dialog/ContactName/ContactName.jsx","components/Dialog/Message/Message.jsx","components/Dialog/Dialog.jsx","App.js","serviceWorker.js","redux/state.js","index.js"],"names":["module","exports","Header","className","classes","to","src","alt","Navigation","activeClassName","activeLink","Post","props","message","likes","MyPosts","postsBlock","React","createRef","newPostElement","newPostClear","PostInput","onChange","updateNewPostText","current","value","ref","newPostText","onClick","addPost","postsData","map","elem","content","likesCount","ProfileInfo","descBlock","Profile","profilePage","ContactName","name","data","id","activeName","Message","Dialog","messageInputRef","Dialogs","contacts","messagesPage","dialogsData","messageWrapper","messages","alert","App","store","getState","dialogsPage","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","_callSubscriber","_state","this","newPost","push","newText","subscribe","observer","renderEntireTree","ReactDOM","render","bind","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6ef70704.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navigation\":\"Navigation_Navigation__1tTPb\",\"Navigation-elem\":\"Navigation_Navigation-elem__17gdN\",\"activeLink\":\"Navigation_activeLink__2rUFB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Dialogs\":\"Dialog_Dialogs__ZnStm\",\"contacts\":\"Dialog_contacts__G8U0B\",\"name\":\"Dialog_name__3Ckyt\",\"activeName\":\"Dialog_activeName__3ECKn\",\"messageWrapper\":\"Dialog_messageWrapper__-zxmo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__2C_Ub\",\"Header-logo\":\"Header_Header-logo__34Lgu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PostInput\":\"MyPosts_PostInput__1Ljwk\",\"postsBlock\":\"MyPosts_postsBlock__2ifKf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Profile-image\":\"ProfileInfo_Profile-image__1JMED\",\"descBlock\":\"ProfileInfo_descBlock__2zXqS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__ihtu9\"};","import React from 'react';\nimport classes from './Header.module.css';\n\nimport {NavLink} from 'react-router-dom';\n\nconst Header = () => {\n  return (\n    <header className={classes['Header']}>\n      <NavLink to='/profile'>\n        <img className={classes['Header-logo']} src='https://upload.wikimedia.org/wikipedia/commons/a/ab/Android_O_Preview_Logo.png' alt='' />\n      </NavLink>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from 'react';\nimport classes from './Navigation.module.css';\nimport {NavLink} from  'react-router-dom';\n\nconst Navigation = () => {\n  return (\n    <nav className={classes['Navigation']}>\n      <div className={classes['Navigation-elem']}><NavLink to='/profile' activeClassName={classes.activeLink}>Profile</NavLink></div>\n      <div className={classes['Navigation-elem']}><NavLink to='/messages' activeClassName={classes.activeLink}>Messages</NavLink></div>\n      <div className={classes['Navigation-elem']}><NavLink to='/news' activeClassName={classes.activeLink}>News</NavLink></div>\n      <div className={classes['Navigation-elem']}><NavLink to='/music' activeClassName={classes.activeLink}>Music</NavLink></div>\n      <div className={classes['Navigation-elem']}><NavLink to='/settings'activeClassName={classes.activeLink}>Settings</NavLink></div>\n    </nav>\n  );\n}\n\nexport default Navigation;\n","import React from 'react';\nimport classes from './Post.module.css';\n\nconst Post = (props) => {\n  return (\n    <div className={classes['item']}>\n      <img src='https://hornews.com/images/news_large/c1d4b2b8ec608ea72764c5678816d5c9.jpg' alt='' />\n      {props.message}\n      <div>\n        <span>Like</span> {props.likes}\n      </div>\n    </div>\n\n  );\n}\n\nexport default Post;\n","import React from 'react';\nimport classes from './MyPosts.module.css';\n\nimport Post from './Post/Post.jsx';\n\n\n\nconst MyPosts = (props) => {\n\n  let myPosts = () => props.postsData.map((elem) => <Post message={elem.content} likesCount={elem.likesCount} />);\n\n\n  let postsBlock = React.createRef();\n  let newPostElement = React.createRef();\n  let newPostClear = React.createRef();\n\n  let addPost = () => {\n    props.addPost(newPostElement.current.value);\n  }\n  let newPostChange = () => {\n    props.updateNewPostText(newPostElement.current.value);\n  }\n  let newPostClearF = () => {\n    props.updateNewPostText('');\n  }\n\n  return (\n    <div>\n\n      <div className={classes.PostInput}>\n        <h3>My Posts</h3>\n        <textarea onChange={newPostChange} ref={newPostElement} value={props.newPostText}/>\n        <div>\n          <button onClick={addPost}>Add Post</button>\n          <button onClick={newPostClearF} ref={newPostClear}>Remove</button>\n        </div>\n\n      </div>\n      <div className={classes.postsBlock} ref={postsBlock}>\n        {myPosts()}\n      </div>\n    </div>\n  );\n}\n\nexport default MyPosts;\n","import React from 'react';\nimport classes from './ProfileInfo.module.css';\n\nconst ProfileInfo = () => {\n  return (\n    <div>\n      <img className={classes['Profile-image']} src='https://www.belightsoft.com/products/imagetricks/img/intro-video-poster@2x.jpg' alt=''/>\n      <div className={classes.descBlock}>\n        ava+desc\n      </div>\n    </div>\n\n  );\n}\n\nexport default ProfileInfo;\n","import React from 'react';\nimport classes from './Profile.module.css';\n\nimport MyPosts from './MyPosts/MyPosts.jsx';\nimport ProfileInfo from './ProfileInfo/ProfileInfo.jsx';\n\nconst Profile = (props) => {\n\n\n  return (\n    <div className={classes['Profile']}>\n      <div>\n        <ProfileInfo />\n      </div>\n      <MyPosts\n        postsData={props.profilePage.postsData}\n        newPostText={props.profilePage.newPostText}\n        addPost={props.addPost}\n        updateNewPostText={props.updateNewPostText}\n      />\n    </div>\n  );\n}\n\nexport default Profile;\n","import React from 'react';\nimport classes from '../Dialog.module.css';\n\nimport {NavLink} from 'react-router-dom';\n\n\nconst ContactName = (props) => {\n  return(\n    <div className={classes.name}>\n      <NavLink to={`/messages/${props.data.id}`} activeClassName={classes.activeName}>{props.data.name}</NavLink>\n    </div>\n  )\n}\n\nexport default ContactName;\n","import React from 'react';\nimport classes from '../Dialog.module.css';\n\nconst Message = (props) => {\n  return (\n    <div className={classes.message}>\n      {props.data.content}\n    </div>\n  )\n}\n\nexport default Message;\n","import React from 'react';\nimport classes from './Dialog.module.css';\n\nimport ContactName from './ContactName/ContactName.jsx'\nimport Message from './Message/Message.jsx'\n\nconst Dialog = (props) => {\n\n  let messageInputRef = React.createRef();\n\n  let sendButtonClick = () => {\n    alert(messageInputRef.current.value);\n  }\n\n  return (\n    <div className={classes.Dialogs}>\n\n      <div className={classes.contacts}>\n        {props.messagesPage.dialogsData.map((elem) => <ContactName data={elem} />)}\n\n\n      </div>\n\n      <div className={classes.messageWrapper}>\n        {props.messagesPage.messages.map((elem) => <Message data={elem} />)}\n        <textarea ref={messageInputRef} />\n        <button onClick={sendButtonClick}>Send</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Dialog;\n","import React from 'react';\n\rimport './App.css';\n\n\r\rimport Header from './components/Header/Header.jsx';\r\nimport Navigation from './components/Navigation/Navigation.jsx';\r\nimport Profile from './components/Profile/Profile.jsx';\r\nimport Dialog from './components/Dialog/Dialog.jsx';\n\r\nimport {BrowserRouter, Route} from 'react-router-dom';\n\n\r\rfunction App(props) {\r\n  return (\r\n    <BrowserRouter>\r\n      <div className='App-wrapper'>\n\n\r\r        <Header className='App-header'/>\n\r\r        <Navigation className='App-navigation' />\n\r\r        <div className='App-content'>\r\n\n          <Route path='/messages' render={() => <Dialog messagesPage={props.store.getState().dialogsPage} />}/>\r\n          <Route path='/profile' render={() => <Profile profilePage={props.store.getState().profilePage} addPost={props.addPost} updateNewPostText={props.updateNewPostText}/>} />\n        </div>\r\r\r\n\n      </div>\r\n    </BrowserRouter>\r\n  );\r\n}\n\n\r\rexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","let store = {\n  _callSubscriber(state) {\n    console.log('State Changed');\n  },\n  _state: {\n    profilePage: {\n      postsData: [\n        {\n          id: 1,\n          content: 'Hi, there',\n          likesCount: 9\n        },\n        {\n          id: 0,\n          content: 'My 1st post',\n          likesCount: 12\n        },\n        {\n          id: 2,\n          content: 'Blah Blah Blah',\n          likesCount: 12\n        }\n      ],\n      newPostText: ''\n    },\n    dialogsPage: {\n      dialogsData: [\n        {id: 1, name: 'Dima'},\n        {id: 2, name: 'Andrey'},\n        {id: 3, name: 'Lena'},\n        {id: 4, name: 'Sveta'},\n        {id: 5, name: 'Sasha'},\n        {id: 6, name: 'Victor'}\n      ],\n      messages: [\n        {\n          id: 1,\n          content: 'Hi!'\n        },\n        {\n          id: 2,\n          content: 'How are u?!'\n        },\n        {\n          id: 3,\n          content: \"The weather is good isn't it?\"\n        }\n      ]\n    }\n  },\n  getState() {\n    return this._state;\n  },\n  addPost() {\n    if (this._state.profilePage.newPostText){\n      let newPost = {\n        id: 3,\n        content: this._state.profilePage.newPostText,\n        likesCount: 0\n      };\n      this._state.profilePage.postsData.push(newPost);\n      this._state.profilePage.newPostText = '';\n      this._callSubscriber(this._state);\n    }\n  },\n  updateNewPostText(newText) {\n    this._state.profilePage.newPostText = newText;\n    this._callSubscriber(this._state);\n  },\n  subscribe(observer) {\n    this._callSubscriber = observer;\n  }\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport store from './redux/state.js';\n\nlet renderEntireTree = (state) => {\n  ReactDOM.render(\n    <App state={state} store={store} addPost={store.addPost.bind(store)} updateNewPostText={store.updateNewPostText.bind(store)}/>,\n    document.getElementById('root')\n  );\n};\n\nrenderEntireTree(store.getState());\n\nstore.subscribe(renderEntireTree);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}